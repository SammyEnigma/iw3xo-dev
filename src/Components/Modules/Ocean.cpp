#include "STDInclude.hpp"

// show tooltip after x seconds
#define TTDELAY 1.0f 

// tooltip with delay
#define TT(tooltip) if (ImGui::IsItemHoveredDelay(TTDELAY)) { ImGui::SetTooltip(tooltip); }

// spacing dummy
#define SPACING(x, y) ImGui::Dummy(ImVec2(x, y)) 

// seperator with spacing
#define SEPERATORV(spacing) SPACING(0.0f, spacing); ImGui::Separator(); SPACING(0.0f, spacing); 


namespace Components
{
	// vert + pixel
	Game::vec4_t _WaveAmplitude		= { 0.72f,	0.40f,	0.46f,	1.93f };	// filterTap0
	Game::vec4_t _WavesIntensity	= { 0.28f,	1.95f,	1.00f,	1.90f };	// filterTap1
	Game::vec4_t _WavesNoise		= { 0.05f,	0.45f,	1.18f,	0.28f };	// filterTap2

	// vert ---------------------------------------------------------------------
	Game::vec2_t _WindDirection			= { -0.85f,	-3.1f };			// filterTap3
	float		 _HeightIntensity		= 1.10f;
	float		 _WaveAmplitudeFactor	= 1.35f;

	float		 _WaveSteepness			= 0.65f;						// filterTap4
	float		 _TextureTiling			= 0.95f;
	float		 _WaveTiling			= 0.06f;
	float		 _Time					= 0.03f;

	float		 _VisibleWaveDist		= 0.20f;						// filterTap5
	float		 _HeightMapScale		= 4.0f;
	float		 _HeightMapScroll		= 0.15f;

	// pixel --------------------------------------------------------------------
	Game::vec3_t _AmbientColor		= { 1.0f, 1.0f, 1.0f };				// filterTap3
	float		 _AmbientDensity	= -0.0075f;

	Game::vec3_t _ShoreColor		= { 1.0f, 1.0f, 1.0f };				// filterTap4
	float		 _DiffuseDensity	= -0.2649f;

	Game::vec3_t _SurfaceColor		= { 0.871f, 0.953f, 0.804f };		// filterTap5
	float		 _NormalIntensity	= 0.9549f;

	Game::vec3_t _DepthColor		= { 0.914f, 0.988f, 1.047f };		// filterTap6
	float		 _ShoreFade			= 0.0073f;

	Game::vec3_t _RefractionValues	= { -0.2637f, 0.4148f, 1.0f };		// filterTap7
	float		 _RefractionScale	= 0.005f;

	Game::vec3_t _HorizontalExtinction	= { 100.0f, 250.0f, 500.0f };	// colorMatrixR
	float		 _Distortion			= 0.4f;

	float		 _WaterClarity		= 12.0f;							// colorMatrixG
	float		 _WaterTransparency	= 500.0f;
	float		 _RadianceFactor	= -1.75f;							// 1 float left empty

	Game::vec3_t _SpecularValues	= { 17.75f, 43.00f, 5.5f };			// colorMatrixB
	float		 _Shininess			= 0.68f;

	Game::vec3_t _FoamTiling		= { 0.075f, 0.25f, -0.7f };			// dofEquationViewModelAndFarBlur
	float		 _FoamSpeed			= 150.0f;

	Game::vec3_t _FoamRanges		= { 1.8f, 2.2f, 2.46f };			// dofEquationScene
	float		 _FoamIntensity		= 14.00f;

	Game::vec4_t _FoamNoise			= { 1.0f, 1.00f, 1.00f, 1.00f };	// dofLerpScale

	// *
	// *

	void dump_settings()
	{
		if (const auto& fs_basepath = Game::Dvar_FindVar("fs_basepath"); fs_basepath)
		{
			std::string basePath = fs_basepath->current.string;
						basePath += "\\iw3xo\\shader_settings\\";

			if (std::filesystem::create_directories(basePath))
			{
				Game::Com_PrintMessage(0, "Created directory \"root/iw3xo/shader_settings\"\n", 0);
			}

			std::ofstream ocean;

			// steam to .map file
			ocean.open((basePath + "ocean_settings.txt").c_str());

			ocean << "// generated by IW3xo - https://github.com/xoxor4d/iw3xo-dev \n";
			ocean << "// ocean shader settings dump\n";
			ocean << "\n";

			ocean << "// ---------------------------------------------------------\n";
			ocean << "// VERTEX + PIXELSHADER ------------------------------------\n";
			ocean << "\n";

			ocean << "const float4 _WaveAmplitude = float4(" << _WaveAmplitude[0] << ", " << _WaveAmplitude[1] << ", " << _WaveAmplitude[2] << ", " << _WaveAmplitude[3] << ");" << std::endl;
			ocean << "\t  float4 _WavesIntensity = float4(" << _WavesIntensity[0] << ", " << _WavesIntensity[1] << ", " << _WavesIntensity[2] << ", " << _WavesIntensity[3] << ");" << std::endl;
			ocean << "\t  float4 _WavesNoise = float4(" << _WavesNoise[0] << ", " << _WavesNoise[1] << ", " << _WavesNoise[2] << ", " << _WavesNoise[3] << ");" << std::endl;

			ocean << "\n";
			ocean << "// ---------------------------------------------------------\n";
			ocean << "// VERTEXSHADER --------------------------------------------\n";
			ocean << "\n";

			ocean << "\t  float2 _WindDirection = float2(" << _WindDirection[0] << ", " << _WindDirection[1] << ");" << std::endl;
			ocean << "\t  float  _HeightIntensity = " << _HeightIntensity << ";" << std::endl;
			ocean << "const float  _WaveAmplitudeFactor = " << _WaveAmplitudeFactor << ";" << std::endl;
			ocean << "const float  _WaveSteepness = " << _WaveSteepness << ";" << std::endl;
			ocean << "const float  _TextureTiling = " << _TextureTiling << ";" << std::endl;
			ocean << "const float  _WaveTiling = " << _WaveTiling << ";" << std::endl;
			ocean << "\t  float  _Time = gameTime.w * " << _Time << ";" << std::endl;
			ocean << "const float  _VisibleWaveDist = " << _VisibleWaveDist << ";" << std::endl;
			ocean << "const float  _HeightMapScale = " << _HeightMapScale << ";" << std::endl;
			ocean << "\t  float  _HeightMapScroll = gameTime.w * " << _HeightMapScroll << ";" << std::endl;

			ocean << "\n";
			ocean << "// ---------------------------------------------------------\n";
			ocean << "// PIXELSHADER ---------------------------------------------\n";
			ocean << "\n";

			ocean << "// colors\n";
			ocean << "const float3 _AmbientColor = float3(" << _AmbientColor[0] << ", " << _AmbientColor[1] << ", " << _AmbientColor[2] << ");" << std::endl;
			ocean << "const float  _AmbientDensity = " << _AmbientDensity << ";" << std::endl;
			ocean << "const float3 _ShoreColor = float3(" << _ShoreColor[0] << ", " << _ShoreColor[1] << ", " << _ShoreColor[2] << ");" << std::endl;
			ocean << "const float  _DiffuseDensity = " << _DiffuseDensity << ";" << std::endl;
			ocean << "const float3 _SurfaceColor = float3(" << _SurfaceColor[0] << ", " << _SurfaceColor[1] << ", " << _SurfaceColor[2] << ");" << std::endl;
			ocean << "const float  _NormalIntensity = " << _NormalIntensity << ";" << std::endl;
			ocean << "const float3 _DepthColor = float3(" << _DepthColor[0] << ", " << _DepthColor[1] << ", " << _DepthColor[2] << ");" << std::endl;
			ocean << "const float  _ShoreFade = " << _ShoreFade << ";" << std::endl;
			ocean << "\n";

			ocean << "// refraction\n";
			ocean << "const float3 _RefractionValues = float3(" << _RefractionValues[0] << ", " << _RefractionValues[1] << ", " << _RefractionValues[2] << ");" << std::endl;
			ocean << "const float  _RefractionScale = " << _RefractionScale << ";" << std::endl;
			ocean << "const float3 _HorizontalExtinction = float3(" << _HorizontalExtinction[0] << ", " << _HorizontalExtinction[1] << ", " << _HorizontalExtinction[2] << ");" << std::endl;
			ocean << "const float  _Distortion = " << _Distortion << ";" << std::endl;
			ocean << "const float  _WaterClarity = " << _WaterClarity << ";" << std::endl;
			ocean << "const float  _WaterTransparency = " << _WaterTransparency << ";" << std::endl;
			ocean << "const float  _RadianceFactor = " << _RadianceFactor << ";" << std::endl;
			ocean << "\n";

			ocean << "// spec\n";
			ocean << "const float3 _SpecularValues = float3(" << _SpecularValues[0] << ", " << _SpecularValues[1] << ", " << _SpecularValues[2] << ");" << std::endl;
			ocean << "const float  _Shininess = " << _Shininess << ";" << std::endl;
			ocean << "\n";

			ocean << "// shore/foam\n";
			ocean << "const float3 _FoamTiling = float3(" << _FoamTiling[0] << ", " << _FoamTiling[1] << ", " << _FoamTiling[2] << ");" << std::endl;
			ocean << "const float  _FoamSpeed = " << _FoamSpeed << ";" << std::endl;
			ocean << "const float3 _FoamRanges = float3(" << _FoamRanges[0] << ", " << _FoamRanges[1] << ", " << _FoamRanges[2] << ");" << std::endl;
			ocean << "\t  float  _FoamIntensity = " << _FoamIntensity << ";" << std::endl;
			ocean << "const float4 _FoamNoise = float4(" << _FoamNoise[0] << ", " << _FoamNoise[1] << ", " << _FoamNoise[2] << ", " << _FoamNoise[3] << ");" << std::endl;

			Game::Com_PrintMessage(0, Utils::VA("Dumped shader settings to: %s", (basePath + "ocean_settings.txt").c_str()), 0);
			ocean.close();
		}
	}
	
	void Ocean::set_vertexshader_constants(Game::GfxCmdBufState* state, Game::MaterialShaderArgument* const arg_def)
	{
		if (state->pass->vertexShader && !Utils::Q_stricmp(state->pass->vertexShader->name, "worldfx_ocean"))
		{
			// vertex + pixel
			if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_0) {
				(*Game::dx9_device_ptr)->SetVertexShaderConstantF(arg_def->dest, _WaveAmplitude, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_1) {
				(*Game::dx9_device_ptr)->SetVertexShaderConstantF(arg_def->dest, _WavesIntensity, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_2) {
				(*Game::dx9_device_ptr)->SetVertexShaderConstantF(arg_def->dest, _WavesNoise, 1);
			}

			// vertex only
			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_3)
			{
				float constant[4] = { _WindDirection[0], _WindDirection[1], _HeightIntensity, _WaveAmplitudeFactor };
				(*Game::dx9_device_ptr)->SetVertexShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_4)
			{
				float constant[4] = { _WaveSteepness, _TextureTiling, _WaveTiling, _Time };
				(*Game::dx9_device_ptr)->SetVertexShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_5)
			{
				float constant[4] = { _VisibleWaveDist, _HeightMapScale, _HeightMapScroll, 0.0f };
				(*Game::dx9_device_ptr)->SetVertexShaderConstantF(arg_def->dest, constant, 1);
			}
		}
	}

	// *
	// *
	
	void Ocean::set_pixelshader_constants(Game::GfxCmdBufState* state, Game::MaterialShaderArgument* const arg_def)
	{
		if (state->pass->pixelShader && !Utils::Q_stricmp(state->pass->pixelShader->name, "worldfx_ocean"))
		{
			// vertex + pixel
			if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_0) {
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, _WaveAmplitude, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_1) {
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, _WavesIntensity, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_2) {
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, _WavesNoise, 1);
			}

			// pixel only
			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_3)
			{
				float constant[4] = { _AmbientColor[0], _AmbientColor[1], _AmbientColor[2], _AmbientDensity };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_4)
			{
				float constant[4] = { _ShoreColor[0], _ShoreColor[1], _ShoreColor[2], _DiffuseDensity };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_5)
			{
				float constant[4] = { _SurfaceColor[0], _SurfaceColor[1], _SurfaceColor[2], _NormalIntensity };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_6)
			{
				float constant[4] = { _DepthColor[0], _DepthColor[1], _DepthColor[2], _ShoreFade };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_FILTER_TAP_7)
			{
				float constant[4] = { _RefractionValues[0], _RefractionValues[1], _RefractionValues[2], _RefractionScale };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_COLOR_MATRIX_R)
			{
				float constant[4] = { _HorizontalExtinction[0], _HorizontalExtinction[1], _HorizontalExtinction[2], _Distortion };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_COLOR_MATRIX_G)
			{
				float constant[4] = { _WaterClarity, _WaterTransparency, _RadianceFactor, 0.0f };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_COLOR_MATRIX_B)
			{
				float constant[4] = { _SpecularValues[0], _SpecularValues[1], _SpecularValues[2], _Shininess };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR)
			{
				float constant[4] = { _FoamTiling[0], _FoamTiling[1], _FoamTiling[2], _FoamSpeed };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_DOF_EQUATION_SCENE)
			{
				float constant[4] = { _FoamRanges[0], _FoamRanges[1], _FoamRanges[2], _FoamIntensity };
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, constant, 1);
			}

			else if (arg_def->u.codeConst.index == Game::ShaderCodeConstants::CONST_SRC_CODE_DOF_LERP_SCALE) {
				(*Game::dx9_device_ptr)->SetPixelShaderConstantF(arg_def->dest, _FoamNoise, 1);
			}
		}
	}

	// *
	// *

	void Ocean::devgui_tab(Game::gui_menus_t& menu)
	{
		const float OCEAN_SLIDER_SPEED = 0.01f;

		if (ImGui::Button("Dump shader settings"))
		{
			dump_settings();
		}

		if (ImGui::CollapsingHeader("Vertex + Pixelshader", ImGuiTreeNodeFlags_DefaultOpen))
		{
			ImGui::Indent(8.0f); SPACING(0.0f, 4.0f);

			ImGui::DragFloat4("WaveAmplitude", _WaveAmplitude, OCEAN_SLIDER_SPEED, 0.0001f, 50.0f, "%.4f");
			ImGui::DragFloat4("WavesIntensity", _WavesIntensity, OCEAN_SLIDER_SPEED, 0.0001f, 50.0f, "%.4f");
			ImGui::DragFloat4("WavesNoise", _WavesNoise, OCEAN_SLIDER_SPEED, 0.0001f, 50.0f, "%.4f");

			SPACING(0.0f, 4.0f); ImGui::Indent(-8.0f);
		}

		if (ImGui::CollapsingHeader("Vertexshader", ImGuiTreeNodeFlags_DefaultOpen))
		{
			ImGui::Indent(8.0f); SPACING(0.0f, 4.0f);

			ImGui::DragFloat2("WindDirection", _WindDirection, OCEAN_SLIDER_SPEED / 2, -30.0f, 30.0f, "%.4f");
			ImGui::DragFloat("HeightIntensity", &_HeightIntensity, OCEAN_SLIDER_SPEED / 2, 0.0001f, 50.0f, "%.4f");
			ImGui::DragFloat("WaveAmplitudeFactor", &_WaveAmplitudeFactor, OCEAN_SLIDER_SPEED / 2, 0.0001f, 50.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat("WaveSteepness", &_WaveSteepness, OCEAN_SLIDER_SPEED / 2, -1.0f, 20.0f, "%.4f");
			ImGui::DragFloat("TextureTiling", &_TextureTiling, OCEAN_SLIDER_SPEED / 8, 0.0001f, 3.0f, "%.4f");
			ImGui::DragFloat("WaveTiling", &_WaveTiling, OCEAN_SLIDER_SPEED / 8, 0.0001f, 4.0f, "%.4f");
			ImGui::DragFloat("Time", &_Time, OCEAN_SLIDER_SPEED / 12, -0.15f, 0.15f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat("VisibleWaveDist", &_VisibleWaveDist, OCEAN_SLIDER_SPEED / 4, -0.15f, 2.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat("HeightMapScale", &_HeightMapScale, OCEAN_SLIDER_SPEED / 8, 0.001f, 25.0f, "%.4f");
			ImGui::DragFloat("HeightMapScroll", &_HeightMapScroll, OCEAN_SLIDER_SPEED / 12, -4.0f, 4.0f, "%.4f");

			SPACING(0.0f, 4.0f); ImGui::Indent(-8.0f);
		}

		if (ImGui::CollapsingHeader("Pixelshader", ImGuiTreeNodeFlags_DefaultOpen))
		{
			ImGui::Indent(8.0f); SPACING(0.0f, 4.0f);

			ImGui::ColorEdit3("AmbientColor", _AmbientColor, ImGuiColorEditFlags_Float | ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_HDR);
			ImGui::DragFloat("AmbientDensity", &_AmbientDensity, OCEAN_SLIDER_SPEED / 8, -5.0f, 5.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::ColorEdit3("ShoreColor", _ShoreColor, ImGuiColorEditFlags_Float | ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_HDR);
			ImGui::DragFloat("DiffuseDensity", &_DiffuseDensity, OCEAN_SLIDER_SPEED / 8, -5.0f, 5.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::ColorEdit3("SurfaceColor", _SurfaceColor, ImGuiColorEditFlags_Float | ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_HDR);
			ImGui::DragFloat("NormalIntensity", &_NormalIntensity, OCEAN_SLIDER_SPEED / 8, -5.0f, 5.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::ColorEdit3("DepthColor", _DepthColor, ImGuiColorEditFlags_Float | ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_HDR);
			ImGui::DragFloat("ShoreFade", &_ShoreFade, OCEAN_SLIDER_SPEED / 16, 0.0f, 1.0f, "%.4f");

			// --------------- 
			SEPERATORV(4.0f);

			ImGui::DragFloat3("RefractionValues", _RefractionValues, OCEAN_SLIDER_SPEED / 8, -5.0f, 5.0f, "%.4f");
			ImGui::DragFloat("RefractionScale", &_RefractionScale, OCEAN_SLIDER_SPEED / 12, -0.5f, 0.5f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat3("HorizontalExtinction", _HorizontalExtinction, OCEAN_SLIDER_SPEED * 2, 0.0f, 1000.0f, "%.4f");
			ImGui::DragFloat("Distortion", &_Distortion, OCEAN_SLIDER_SPEED / 12, -2.0f, 2.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat("WaterClarity", &_WaterClarity, OCEAN_SLIDER_SPEED / 4, -100.0f, 100.0f, "%.4f");
			ImGui::DragFloat("WaterTransparency", &_WaterTransparency, OCEAN_SLIDER_SPEED * 2, -50.0f, 500.0f, "%.4f");
			ImGui::DragFloat("RadianceFactor", &_RadianceFactor, OCEAN_SLIDER_SPEED / 8, -5.0f, 5.0f, "%.4f");

			// --------------- 
			SEPERATORV(4.0f);

			ImGui::DragFloat3("SpecularValues", _SpecularValues, OCEAN_SLIDER_SPEED * 4, 0.001f, 1000.0f, "%.4f");
			ImGui::DragFloat("Shininess", &_Shininess, OCEAN_SLIDER_SPEED, -100.0f, 100.0f, "%.4f");

			// --------------- 
			SEPERATORV(4.0f);

			ImGui::DragFloat3("FoamTiling", _FoamTiling, OCEAN_SLIDER_SPEED / 8, -5.0f, 5.0f, "%.4f");
			ImGui::DragFloat("FoamSpeed", &_FoamSpeed, OCEAN_SLIDER_SPEED * 4, 0.001f, 1000.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat3("FoamRanges", _FoamRanges, OCEAN_SLIDER_SPEED / 8, -10.0f, 10.0f, "%.4f");
			ImGui::DragFloat("FoamIntensity", &_FoamIntensity, OCEAN_SLIDER_SPEED / 8, -10.0f, 40.0f, "%.4f");

			SPACING(0.0f, 4.0f);

			ImGui::DragFloat4("FoamNoise", _FoamNoise, OCEAN_SLIDER_SPEED / 8, -2.0f, 6.0f, "%.4f");

			SPACING(0.0f, 4.0f); ImGui::Indent(-8.0f);
		}
	}
	
	Ocean::Ocean()
	{ }

	Ocean::~Ocean()
	{ }
}